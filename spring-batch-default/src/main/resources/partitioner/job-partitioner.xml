<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/batch
	http://www.springframework.org/schema/batch/spring-batch.xsd
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/jdbc
    http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">

    <!-- Inspired by  http://docs.spring.io/spring-batch/reference/html/scalability.html example-->

    <!-- Step will need a transaction manager -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" scope="step">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- JobRepository and JobLauncher are configuration/setup classes -->
    <bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean"/>

    <bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository"/>
    </bean>

    <bean id="dataSource"
          class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName"><value>org.h2.Driver</value></property>
        <property name="url"><value>jdbc:h2:./db/springBatchPartitionDb</value></property>
        <property name="username"><value>sa</value></property>
        <property name="password"><value></value></property>
        <property name="maxIdle"><value>1</value></property>
    </bean>

    <!-- partitioner job -->
    <batch:job id="partitionJob">
        <!-- master step, 10 threads (grid-size)  -->
        <batch:step id="masterStep">
            <batch:partition step="slave" partitioner="rangePartitioner">
                <!-- grid size - number of element in a batch -->
                <batch:handler grid-size="3" task-executor="taskExecutor" />
            </batch:partition>
        </batch:step>

    </batch:job>

    <!-- Each thread will run this job, with different stepExecutionContext values and particular range -->
    <batch:step id="slave">
        <batch:tasklet>
            <batch:chunk reader="pagingItemReader" writer="flatFileItemWriter" processor="itemProcessor" commit-interval="1" />
        </batch:tasklet>
    </batch:step>

    <!-- Partitioner implementation -->
    <bean id="rangePartitioner" class="org.spring.batch.infrastructure.partitioner.RangePartitioner" />

    <bean id="taskExecutor" class="org.springframework.core.task.SimpleAsyncTaskExecutor" />

    <!-- inject stepExecutionContext -->
    <bean id="itemProcessor" class="org.spring.batch.infrastructure.processors.TransactionProcessor" scope="step">
        <property name="threadName" value="#{stepExecutionContext[name]}" />
    </bean>

    <bean id="pagingItemReader"
          class="org.springframework.batch.item.database.JdbcPagingItemReader"
          scope="step">
        <property name="dataSource" ref="dataSource" />
        <property name="queryProvider">
            <bean class="org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean">
                <property name="dataSource" ref="dataSource" />
                <property name="selectClause" value="select id, name" />
                <property name="fromClause" value="from transactions" />
                <property name="whereClause">
                    <value><![CDATA[where id >= :fromId and id <= :toId]]></value>
                </property>
                <property name="sortKey" value="id" />
            </bean>
        </property>
        <!-- Inject via the ExecutionContext in rangePartitioner -->
        <property name="parameterValues">
            <map>
                <entry key="fromId" value="#{stepExecutionContext[fromId]}" />
                <entry key="toId" value="#{stepExecutionContext[toId]}" />
            </map>
        </property>
        <property name="pageSize" value="3" />
        <property name="rowMapper">
            <bean class="org.spring.batch.infrastructure.partitioner.TransactionMapper" />
        </property>
    </bean>

    <!-- csv file writer -->
    <bean id="flatFileItemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter" scope="step" >
        <property name="resource" value="file:csv/outputs/transactions.processed#{stepExecutionContext[fromId]}-#{stepExecutionContext[toId]}.csv" />
        <property name="appendAllowed" value="false" />
        <property name="shouldDeleteIfExists" value="true" />
        <property name="lineAggregator">
            <bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
                <property name="delimiter" value="," />
                <property name="fieldExtractor">
                    <bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
                        <property name="names" value="id, name" />
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <!-- create job-meta tables automatically -->
    <jdbc:initialize-database data-source="dataSource" ignore-failures="DROPS">
        <jdbc:script location="org/spring/batch/db-scripts/schema-drop-db.sql" />
        <jdbc:script location="org/spring/batch/db-scripts/schema-create-db.sql" />
        <jdbc:script location="org/spring/batch/db-scripts/schema-populate-db-partitioning.sql" />
    </jdbc:initialize-database>
</beans>